// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(READER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Monetization fields
  subscriptionStatus SubscriptionStatus? @default(ACTIVE)
  stripeCustomerId   String?

  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  posts         Post[]
  comments      Comment[]
  reactions     Reaction[]
  follows       Follow[]  @relation("UserFollows")
  followers     Follow[]  @relation("UserFollowers")
  bookmarks     Bookmark[]
  notifications Notification[]
  badges        UserBadge[]
  crossPosts    CrossPost[]
  subscriptions Subscription[]
  purchases     Purchase[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
enum UserRole {
  ADMIN
  AUTHOR
  READER
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  website     String?
  location    String?
  company     String?
  twitter     String?
  github      String?
  linkedin    String?
  followers   Int      @default(0)
  following   Int      @default(0)
  postsCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id     String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Post {
  id            String     @id @default(cuid())
  title         String
  slug          String     @unique
  content       String
  excerpt       String?
  coverImage    String?
  published     Boolean    @default(false)
  publishedAt   DateTime?
  readingTime   Int?
  wordCount     Int?
  ghostPostId   String?    // Reference to Ghost post
  authorId      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Monetization fields
  isPremium     Boolean    @default(false)
  price         Float?     // Price in USD for premium content
  revenue       Float      @default(0) // Total revenue generated
  views         Int        @default(0)
  purchases     Int        @default(0)

  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  reactions     Reaction[]
  bookmarks     Bookmark[]
  tags          PostTag[]
  categories    PostCategory[]
  crossPosts    CrossPost[]
  purchaseRecords Purchase[]

  // Performance indexes
  @@index([published, createdAt])
  @@index([authorId, published])
  @@index([publishedAt])
  @@index([isPremium])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  parentId  String?  // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
}

model Reaction {
  id       String      @id @default(cuid())
  type     ReactionType
  postId   String
  userId   String
  createdAt DateTime    @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, type])
}

enum ReactionType {
  HEART
  CLAP
  FIRE
  ROCKET
  EYES
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Tag {
  id   String @id @default(cuid())
  name String @unique
  slug String @unique
  color String?
  posts PostTag[]
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
}

model Category {
  id   String @id @default(cuid())
  name String @unique
  slug String @unique
  posts PostCategory[]
}

model PostCategory {
  id         String @id @default(cuid())
  postId     String
  categoryId String

  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([postId, categoryId])
}

model Notification {
  id      String   @id @default(cuid())
  userId  String
  type    NotificationType
  title   String
  message String
  read    Boolean  @default(false)
  data    Json?    // Additional data for the notification
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
  REPLY
  MENTION
}

model Badge {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  color       String
  criteria    String // JSON string describing achievement criteria
  users       UserBadge[]
}

model UserBadge {
  id      String   @id @default(cuid())
  userId  String
  badgeId String
  earnedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
}

model CrossPost {
  id          String   @id @default(cuid())
  postId      String
  userId      String
  platform    Platform
  externalId  String
  externalUrl String
  status      CrossPostStatus @default(PENDING)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, platform])
}

enum Platform {
  GHOST
  WORDPRESS
  BLOGGER
  MEDIUM
}

enum CrossPostStatus {
  PENDING
  PUBLISHED
  FAILED
}

// Monetization Models
model Subscription {
  id            String   @id @default(cuid())
  userId        String
  planId        String
  status        SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id])

  @@index([userId, status])
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  price       Float    // Monthly price in USD
  features    Json     // JSON array of features
  isPopular   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions Subscription[]
}

model Purchase {
  id          String   @id @default(cuid())
  userId      String
  postId      String
  amount      Float    // Amount paid in USD
  currency    String   @default("USD")
  status      PurchaseStatus @default(COMPLETED)
  paymentId   String?  // External payment provider ID
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, createdAt])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
